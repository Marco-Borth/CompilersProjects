a : int;
isHere : bool;
lever : byte;
imastring : string;
doesThisWork : void;

arr : int array [50];
tautology : bool array [5];
masterboard : byte array [2048];

noCondition : bool () {}
oneCondition : int (control : bool) {}
twoCondition : byte (level : bool , switch : int) {}
threeCondition : bool (cond1 : bool , cond2 : int , cond3 : byte array [10]) {}
uno : int (control : bool) { return 4;}
dos : byte (level : bool , switch : int) {write "asdf"; return 70;}
threeCondition : bool (cond1 : bool , cond2 : int , cond3 : byte array [10]) { useThisVar : byte array [256]; return; }

iterationFunc : string () { while (TRUE) { write "loop-de-loop"; } }
iterate4Fun : string () { while (FALSE) { } }

raceToTheFunct : int ( ) { if ("readySetGo") {return 34;} }
thisIsFoolProof : int () { if (456) { write 45; } else { return 12; } }

bigTest : void () { hanky++; panky--; read holabolu; }
global1:int;
global2:int;
alpha : int (c:bool, d:int) {b[3]++; c = false; write(c);}
//Test Binary Exps
bravo : void (c:bool, d:bool, e:int) {if(c && d){e++;}}
charlie : void (c:bool, d:bool, e:int) {if(c || d){e++;}}
charlie : void (c:bool, d:bool, e:int, g:bool, f:bool) {if((c || d)&&(g&&f)){e++;}}
echo : void (c:bool, d:bool, e:int, h:int) {
	if(true)
	{
		e=(e+h);
	}
}
foxtrot : void (c:bool, d:bool, e:int, h:int) {
	if(true)
	{
		e=(e-h);
	}
}
golf : void (c:bool, d:bool, e:int, h:int) {
	if(true)
	{
		e=(e*h);
	}
}

hotel : void (c:bool, d:bool, e:int, h:int) {
	if(true)
	{
		e=(e/h);
	}
}

india : void (c:bool, d:bool, e:int, h:int) {
	if(e == h)
	{
		d = true;
	}
}

juliet : void (c:bool, d:bool, e:int, h:int) {
	if(e != h)
	{
		d = true;
	}
}

kilo : void (c:bool, d:bool, e:int, h:int) {
	if((e > h) || (e<h))
	{
		d = true;
	}
}

lima : void (c:bool, d:bool, e:int, h:int) {
	if((e >= h) || (e<=h))
	{
		d = true;
	}
}
//END Test Binary Expressions

//Begin Unary Node Test
mike : void (c:bool, d:bool, e:int, h:int) {
	if((e >= h) || (e<=h))
	{
		e = -e;
	}
}

november : void (c:bool, d:bool, e:int, h:int) {
	if((e >= h) || (e<=h))
	{
		e = -e+3;c = !d;
	}
}

//END Unary Node Test

//BEGIN CallStmtNode and CallExpNode Tests

oscar : void (c:bool, d:bool, e:int, h:int) {
	if(true)
	{
		myFunct(c, d, (e+h));myVoidFunct1();
	}
}

//END CallStmtNode and CallExpNode Tests
