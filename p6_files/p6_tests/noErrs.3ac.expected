[BEGIN GLOBALS]
ant
bailey
brenda
q
str_2 "asdf"
str_1 "asdf"
str_0 "qwop"
[END GLOBALS]
[BEGIN fn LOCALS]
z (formal arg of 8)
[END fn LOCALS]
fun_fn:     enter fn
            getarg 1 [z]
lbl_0:      leave fn
[BEGIN main LOCALS]
c (formal arg of 8)
a (local var of 8 bytes)
b (local var of 8 bytes)
e (local var of 1 bytes)
d (local var of 1 bytes)
tmp0 (tmp var of 8 bytes)
tmp1 (tmp var of 8 bytes)
tmp2 (tmp var of 1 bytes)
tmp3 (tmp var of 1 bytes)
[END main LOCALS]
main:       enter main
            getarg 1 [c]
            [a] := 543653
            [b] := 25532
            [tmp0] := [a] DIV64 [b]
            [a] := [tmp0]
            [tmp1] := [a] ADD64 [b]
            [a] := [tmp1]
            [tmp2] := [e] MULT8 [d]
            [e] := [tmp2]
            [tmp3] := [e] SUB8 [d]
            [e] := [tmp3]
lbl_1:      leave main
[BEGIN master LOCALS]
b (local var of 1 bytes)
msg (local var of 0 bytes)
[END master LOCALS]
fun_master: enter master
            [b] := 1
            [ant] := 1000
            READ [ant]
            IFZ [b] GOTO lbl_3
lbl_3:      nop
            IFZ [b] GOTO lbl_4
            [ant] := 3000
            goto lbl_5
lbl_4:      nop
            [msg] := [str_0]
lbl_5:      nop
            setret [b]
            goto lbl_2
lbl_2:      leave master
[BEGIN multiples LOCALS]
r (formal arg of 8)
s (formal arg of 1)
t (formal arg of 1)
arr (local var of 64000 bytes)
barr (local var of 10 bytes)
biscut (local var of 50 bytes)
tmp0 (tmp var of 8 bytes)
tmp1 (tmp var of 8 bytes)
loc2 (tmp loc of 8 bytes)
loc3 (tmp loc of 1 bytes)
loc4 (tmp loc of 1 bytes)
[END multiples LOCALS]
fun_multiples: enter multiples
            getarg 1 [r]
            getarg 2 [s]
            getarg 3 [t]
            [tmp0] := 2
            [tmp1] := 500 MULT64 8
            loc2 := arr ADD64 [tmp1]
            [loc2] := [tmp0]
            loc3 := barr ADD64 5
            [loc3] := 1
            loc4 := biscut ADD64 10
            [loc4] := 50
lbl_6:      leave multiples
[BEGIN see LOCALS]
msg (local var of 0 bytes)
b (local var of 1 bytes)
c (local var of 1 bytes)
a (local var of 1 bytes)
d (local var of 1 bytes)
x (local var of 8 bytes)
y (local var of 8 bytes)
f (local var of 8 bytes)
g (local var of 8 bytes)
tmp0 (tmp var of 8 bytes)
tmp1 (tmp var of 8 bytes)
tmp2 (tmp var of 1 bytes)
tmp3 (tmp var of 1 bytes)
tmp4 (tmp var of 1 bytes)
tmp5 (tmp var of 1 bytes)
tmp6 (tmp var of 8 bytes)
tmp7 (tmp var of 1 bytes)
tmp8 (tmp var of 1 bytes)
tmp9 (tmp var of 8 bytes)
[END see LOCALS]
fun_see:    enter see
lbl_8:      nop
            IFZ [brenda] GOTO lbl_9
            [ant] := 500
            goto lbl_8
lbl_9:      nop
            [msg] := [str_1]
            [b] := 1
            [c] := 1
            [a] := 10
            [d] := 20
            [x] := 1000
            [y] := 2000
            [f] := 543653
            [g] := 25532
            [tmp0] := [f] DIV64 [g]
            [f] := [tmp0]
            [tmp1] := [f] ADD64 [g]
            [f] := [tmp1]
            [tmp2] := [b] AND8 [c]
            IFZ [tmp2] GOTO lbl_10
lbl_10:     nop
            [tmp3] := [b] OR8 [c]
            IFZ [tmp3] GOTO lbl_11
lbl_11:     nop
            WRITE [msg]
            [tmp4] := [a] EQ8 [d]
            IFZ [tmp4] GOTO lbl_12
lbl_12:     nop
            [tmp5] := [b] EQ8 [c]
            IFZ [tmp5] GOTO lbl_13
lbl_13:     nop
            [tmp6] := [x] EQ64 [y]
            IFZ [tmp6] GOTO lbl_14
lbl_14:     nop
            WRITE [msg]
            [tmp7] := [a] NEQ8 [d]
            IFZ [tmp7] GOTO lbl_15
lbl_15:     nop
            [tmp8] := [b] NEQ8 [c]
            IFZ [tmp8] GOTO lbl_16
lbl_16:     nop
            [tmp9] := [x] NEQ64 [y]
            IFZ [tmp9] GOTO lbl_17
lbl_17:     nop
            WRITE [msg]
lbl_7:      leave see
[BEGIN forsee LOCALS]
msg (local var of 0 bytes)
b (local var of 1 bytes)
a (local var of 1 bytes)
d (local var of 1 bytes)
x (local var of 8 bytes)
y (local var of 8 bytes)
tmp0 (tmp var of 1 bytes)
tmp1 (tmp var of 8 bytes)
tmp2 (tmp var of 1 bytes)
tmp3 (tmp var of 8 bytes)
tmp4 (tmp var of 1 bytes)
tmp5 (tmp var of 8 bytes)
tmp6 (tmp var of 1 bytes)
tmp7 (tmp var of 8 bytes)
tmp8 (tmp var of 1 bytes)
tmp9 (tmp var of 8 bytes)
tmp10 (tmp var of 1 bytes)
tmp11 (tmp var of 8 bytes)
[END forsee LOCALS]
fun_forsee: enter forsee
            [msg] := [str_2]
            [b] := 1
            [a] := 10
            [d] := 20
            [x] := 1000
            [y] := 2000
            [tmp0] := [a] GT8 [d]
            IFZ [tmp0] GOTO lbl_19
lbl_19:     nop
            [tmp1] := [x] GT64 [y]
            IFZ [tmp1] GOTO lbl_20
lbl_20:     nop
            WRITE [msg]
            [tmp2] := [a] GTE8 [d]
            IFZ [tmp2] GOTO lbl_21
lbl_21:     nop
            [tmp3] := [x] GTE64 [y]
            IFZ [tmp3] GOTO lbl_22
lbl_22:     nop
            WRITE [msg]
            [tmp4] := [a] LT8 [d]
            IFZ [tmp4] GOTO lbl_23
lbl_23:     nop
            [tmp5] := [x] LT64 [y]
            IFZ [tmp5] GOTO lbl_24
lbl_24:     nop
            WRITE [msg]
            [tmp6] := [a] GTE8 [d]
            IFZ [tmp6] GOTO lbl_25
lbl_25:     nop
            [tmp7] := [x] GTE64 [y]
            IFZ [tmp7] GOTO lbl_26
lbl_26:     nop
            WRITE [msg]
            [tmp8] := [a] LTE8 [d]
            IFZ [tmp8] GOTO lbl_27
lbl_27:     nop
            [tmp9] := [x] LTE64 [y]
            IFZ [tmp9] GOTO lbl_28
lbl_28:     nop
            WRITE [msg]
            [tmp10] := NOT8 [b]
            IFZ [tmp10] GOTO lbl_29
            [tmp11] := NEG64 4500
            [x] := [tmp11]
lbl_29:     nop
lbl_18:     leave forsee
[BEGIN hollowedNight LOCALS]
b (local var of 1 bytes)
a (local var of 1 bytes)
x (local var of 8 bytes)
tmp0 (tmp var of 8 bytes)
tmp1 (tmp var of 1 bytes)
[END hollowedNight LOCALS]
fun_hollowedNight: enter hollowedNight
            [b] := 1
            [a] := 10
            [x] := 1000
            [a] := [a] ADD8 1
            [x] := [x] ADD64 1
            [a] := [a] SUB8 1
            [x] := [x] SUB64 1
            setarg 1 500
            call main
            setarg 1 1000
            call main
            [tmp0] := 5
            setarg 1 [tmp0]
            setarg 2 5
            setarg 3 [b]
            call multiples
lbl_30:     leave hollowedNight
